name: dvp-00

on:
  workflow_dispatch:

jobs:
  repos-list:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Create matrix
        id: repos
        run: |
          echo ::set-output name=matrix::$(cat ./dvp-repos-00.txt | jq -ncR '[inputs]')
      -
        name: Show matrix
        run: |
          echo ${{ steps.repos.outputs.matrix }}
    outputs:
      matrix: ${{ steps.repos.outputs.matrix }}

  scan:
    needs: [repos-list]
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.repos-list.outputs.matrix) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Init
        run: |
          mkdir -p /tmp/trivy
          CACHE_KEY=${{ matrix.image }}
          echo "CACHE_KEY=${CACHE_KEY/\//-}" >> $GITHUB_ENV
      -
        name: Get Docker JWT Token
        id: jwt
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ matrix.image }}:pull" | jq -r .token)
          if [ -z "${TOKEN}" -o "${TOKEN}" = "null" ]; then
            echo "::error::Cannot retrieve token"
            exit 1
          fi
          echo ::set-output name=token::${TOKEN}
      -
        name: Get Docker Tags
        id: tags
        if: success()
        run: |
          TAG_LIST=$(curl -s -H "Authorization: Bearer ${{ steps.jwt.outputs.token }}" "https://index.docker.io/v2/${{ matrix.image }}/tags/list" | jq -rc 'try .tags[]')
          if [ -z "${TAG_LIST}" -o "${TAG_LIST}" = "null" ]; then
            echo "::error::Cannot retrieve tags"
            exit 1
          fi
          echo ::set-output name=list::${TAG_LIST}
      -
        name: Install Trivy
        run: |
          curl -SsL "https://github.com/aquasecurity/trivy/releases/download/v0.21.2/trivy_0.21.2_Linux-64bit.deb" -o "/tmp/trivy.deb"
          sudo dpkg -i /tmp/trivy.deb
          trivy --version
      -
        name: Install Regctl
        run: |
          curl -SsL "https://github.com/regclient/regclient/releases/download/v0.3.9/regctl-linux-amd64" -o "/tmp/regctl"
          sudo mv /tmp/regctl /usr/local/bin/regctl
          sudo chmod +x /usr/local/bin/regctl
          regctl version
      -
        name: Cache Trivy
        uses: actions/cache@v2
        with:
          path: /tmp/trivy
          key: ${{ runner.os }}-trivy-${{ env.CACHE_KEY }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-trivy-${{ env.CACHE_KEY }}-
      -
        name: Scan
        if: success()
        run: |
          for TAG in $(echo ${{ steps.tags.outputs.list }} | sed "s/,/ /g"); do
            echo "Scanning ${{ matrix.image }}:$TAG..."
            log4jversion=$(trivy --cache-dir /tmp/trivy/ --quiet i --template="@cve-2021-44228.tmpl" --format=template --no-progress ${{ matrix.image }}:$TAG 2>/dev/null || true)
            if [[ -n "$log4jversion" ]] && [[ "$log4jversion" != "none" ]]; then
              digest="$(regctl image digest ${{ matrix.image }}:$TAG)"
              echo "${{ matrix.image }}:$TAG,digest=$digest,log4j=$log4jversion" >> /tmp/affected.txt
              echo "::warning::${{ matrix.image }}:$TAG (log4j=$log4jversion ; digest=$digest)"
            fi
          done
      -
        name: Cache dir content
        run: |
          tree /tmp/trivy
      -
        name: Upload result
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.CACHE_KEY }}
          path: /tmp/affected.txt
          if-no-files-found: ignore

  merge-result:
    needs: [scan]
    runs-on: ubuntu-latest
    steps:
      -
        name: Download results
        uses: actions/download-artifact@v2
        with:
          path: ./affected
      -
        name: List and combine results
        run: |
          if [ -d ./affected ]; then
            tree ./affected
            find ./affected -name "*.txt" -exec cat '{}' >> ./affected.txt ';'
            sort -o affected.txt affected.txt
          fi
      -
        name: Upload result
        uses: actions/upload-artifact@v2
        with:
          name: affected
          path: ./affected.txt
          if-no-files-found: ignore
