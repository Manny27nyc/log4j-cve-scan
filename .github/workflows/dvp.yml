name: dvp

on:
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        org:
          - accurics
          - adobecoldfusion
          - amdih
          - anaconda
          - appdynamics
          - armswdev
          - balena
          - balenalib
          - bitnami
          - cockroachdb
          - couchbase
          - datadog
          - dynatrace
          - enterprisedb
          - fortinet
          - gooddata
          - grafana
          - graphcore
          - ibm
          - ibmcom
          - intel
          - kasmweb
          - launchdarkly
          - mathworks
          - mirantis
          - mirantiseng
          - neo4j
          - pachyderm
          - paravision
          - percona
          - pingidentity
          - pivotal
          - portainer
          - purestorage
          - rancher
          - redhat
          - snyk
          - spring
          - sysdig
          - ubuntu
          - vertica
          - verticadocker
          - wallarm
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Get Docker JWT Token
        id: jwt
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" "https://auth.docker.io/token?service=registry.docker.io" | jq -r .token)
          if [ -z ${TOKEN} -o ${TOKEN} == "null" ]; then
            echo "::error::Cannot retrieve token"
            exit 1
          fi
          echo ::set-output name=token::${TOKEN}
      -
        name: Get Docker Repos
        id: repos
        if: success()
        run: |
          REPOS_LIST=$(curl -s "https://index.docker.io/v2/repositories/${{ matrix.org }}/?page_size=10000" | jq -rc '.results[].name')
          if [ -z ${REPOS_LIST} -o ${REPOS_LIST} == "null" ]; then
            echo "::error::Cannot retrieve repos"
            exit 1
          fi
          echo ::set-output name=list::${REPOS_LIST}
      -
        name: Get Docker Tags
        id: tags
        if: success()
        run: |
          tags = ""
          for REPO in $(echo ${{ steps.repos.outputs.list }} | sed "s/,/ /g"); do
            TOKEN=$(curl -s -H "Content-Type: application/json" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ matrix.org }}/${REPO}:pull" | jq -r .token)
            if [ -z ${TOKEN} -o ${TOKEN} == "null" ]; then
              echo "::error::Cannot retrieve token for ${{ matrix.org }}/${REPO}"
              exit 1
            else
              TAG_LIST=$(curl -s -H "Authorization: Bearer ${TOKEN}" "https://index.docker.io/v2/${{ matrix.org }}/${REPO}/tags/list" | jq -rc '.tags[]')
              if [ -z ${TAG_LIST} -o ${TAG_LIST} == "null" ]; then
                echo "::warning::Cannot retrieve tags for ${{ matrix.org }}/${REPO}"
              else
                if [ -n "$tags" ]; tags="$tags\n"; fi
                tags="$tags${TAG_LIST}"
              fi
            fi
          done
          echo ::set-output name=list::${tags}
#      -
#        name: Install Trivy
#        run: |
#          curl -SsL "https://github.com/aquasecurity/trivy/releases/download/v0.21.2/trivy_0.21.2_Linux-64bit.deb" -o "/tmp/trivy.deb"
#          sudo dpkg -i /tmp/trivy.deb
#          trivy --version
      -
        name: Tags list
        run: |
          echo ${{ steps.tags.outputs.list }}
#      -
#        name: Scan
#        if: success()
#        run: |
#          affected = ""
#          for TAG in $(echo ${{ steps.tags.outputs.list }} | sed "s/,/ /g"); do
#            echo "Scanning ${{ matrix.image }}:$TAG..."
#            res=$(trivy --quiet i --template="@cve-2021-44228.tmpl" --format=template --no-progress ${{ matrix.image }}:$TAG 2>/dev/null || true)
#            if [ "$res" = "vulnerable" ]; then
#              echo "::warning::${{ matrix.image }}:$TAG"
#              if [ -n "$affected" ]; affected="$affected,"; fi
#              affected="$affected${{ matrix.image }}:$TAG"
#            fi
#          done
#          if [ -n "$affected" ]; then
#            echo "${affected}" > /tmp/affected.txt
#          di
#      -
#        name: Upload result
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ matrix.image }}
#          path: /tmp/affected.txt
#          if-no-files-found: ignore
